#!/m1/shared/bin/perl

########################################################################
#
#  newbooks.cgi : a New Books List program
#
#  Version: 6.1 for Unix
#
#  Created by Michael Doran, doran@uta.edu
#
#  University of Texas at Arlington Libraries
#  Box 19497, Arlington, TX 76019, USA
#
#  This CGI/Perl script is the web interface to a flat-file
#  database of new items extracted from the Voyager catalog.
#  It is meant to integrate with the WebVoyage client of 
#  Voyager 2000.x or 2001.x.  The flat-file database is 
#  generated by a companion script, newbooks.pl.  
#
#  More information at: http://rocky.uta.edu/doran/autolist/
#
########################################################################
#
#  Copyright 2000-2005, The University of Texas at Arlington ("UTA").
#  All rights reserved.
#
#  By using this software the USER indicates that he or she 
#  has read, understood and and will comply with the following:
#
#  UTA hereby grants USER permission to use, copy, modify, and
#  distribute this software and its documentation for any 
#  purpose and without fee, provided that:
#
#  1. the above copyright notice appears in all copies of the
#  software and its documentation, or portions thereof, and
#
#  2. a full copy of this notice is included with the software 
#  and its documentation, or portions thereof, and
#
#  3. neither the software nor its documentation, nor portions
#  thereof, is sold for profit.  Any commercial sale or license
#  of this software, copies of the software, its associated
#  documentation and/or modifications of either is strictly
#  prohibited without the prior consent of UTA.
#
#  Title to copyright to this software and its associated
#  documentation shall at all times remain with UTA.  No right
#  is granted to use in advertising, publicity or otherwise any
#  trademark, service mark, or the name of UTA.
#
#  This software and any associated documentation are provided
#  "as is," and UTA MAKES NO REPRESENTATIONS OR WARRANTIES,
#  EXPRESSED OR IMPLIED, INCLUDING THOSE OF MERCHANTABILITY OR
#  FITNESS FOR A PARTICULAR PURPOSE, OR THAT USE OF THE SOFTWARE,
#  MODIFICATIONS, OR ASSOCIATED DOCUMENTATION WILL NOT INFRINGE
#  ANY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER INTELLECTUAL
#  PROPERTY RIGHTS OF A THIRD PARTY. UTA, The University of Texas
#  System, its Regents, officers, and employees shall not be
#  liable under any circumstances for any direct, indirect, special,
#  incidental, or consequential damages with respect to any claim
#  by USER or any third party on account of or arising from the
#  use, or inability to use, this software or its associated
#  documentation, even if UTA has been advised of the possibility
#  of those damages.
#
#  Submit commercialization requests to: The University of Texas
#  at Arlington, Office of Grant and Contract Services, 701 South
#  Nedderman Drive, Box 19145, Arlington, Texas 76019-0145,
#  ATTN: Director of Technology Transfer.
#
########################################################################
#
#  "Voyager" and "WebVoyage" are trademarks of Endeavor Information
#  Systems, Inc.
#
########################################################################


##########################################################
#  Perl
##########################################################
#
#  Script requires only the standard Perl distribution.
#
#  Make sure the path-to-Perl on the top line of this
#  script is where your Perl executable is located.


##########################################################
#  Platform compatibility
##########################################################
#
#  Sun Solaris
#	The script was created and tested on Solaris.
#
#  IBM AIX.  
#	It should also work fine on AIX.


########################################################################
#
#    * * * * * * * *                               * * * * * * * * 
#    * * * * * * * *     No  editing required!     * * * * * * * *
#    * * * * * * * *                               * * * * * * * * 
#
########################################################################
#
#  The New Books List can be customized by editing newbooks.ini and 
#  the appropriate language module(s).  There shouldn't be any need 
#  to edit this program.
#
#  However, if you are a Perl programmer or just adventuresome, then 
#  by all means have a go.  Commenting is minimal - if you don't
#  understand what the code does, chances are you don't want to mess 
#  with it.  :-) 
#
########################################################################

#  This value is relative to the webserver document root.

my $this_script  = "/cgi-bin/newbooks.cgi"; 

#  This value is relative to the newbooks.cgi program

my $flat_file_db = "./newbooks.txt";

#  Version

my $version = "6.1.1 Unix";

#  Source the configuration file

require "./newbooks.ini";

#  Parse form data 

&ReadParse;

##########################################################
#  ReadParse
##########################################################
#
#  ReadParse reads in and parses the CGI input.
#  It reads  / QUERY_STRING ("get"  method)
#            \    STDIN     ("post" method)

sub ReadParse {
    local (*formdata) = @_ if @_;
    local ($meth, $pair, $name, $value);

    # Retrieve useful ENVIRONMENT VARIABLES
    $meth = $ENV{'REQUEST_METHOD'};

    # If method unspecified or if method is GET
    if ($meth eq  '' || $meth eq 'GET') {
        # Read in query string
        $formdata = $ENV{'QUERY_STRING'};
    }
    # If method is POST
    elsif ($meth eq 'POST') {
        read(STDIN, $formdata, $ENV{'CONTENT_LENGTH'});
    }
    else {
        die "Unknown request method: $meth\n";
    }

    # name-value pairs are separated and put into a list array
    @pairs = split(/&/, $formdata);

    foreach $pair (@pairs) {
        # names and values are split apart
        ($name, $value) = split(/=/, $pair);
        # pluses (+'s) are translated into spaces
        $value =~ tr/+/ /;
        # hex values (%xx) are converted to alphanumeric
        $name  =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
        $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
        # The code below attempts to ferret out shell meta-characters
        # in the form input.  It replaces them with spaces.
        # looking for the presence of shell meta-characters in $name
        $name  =~ s/[{}\!\$;><&\*'\|]/ /g;
        # looking for the presence of shell meta-characters in $value
        $value =~ s/[{}\!\$;><&\*'\|]/ /g;
	if ($name eq "check") {
	    @checked_records = (@checked_records, "$value");
	} else {
            # associative array of names and values created
            $formdata{$name} = $value;
	}
    }
    # De-dup and sort the list of checked records
    if (@checked_records) {
        my %seen = ();
        foreach $i (@checked_records) {
  	    push (@uniq, $i) unless $seen{$i}++;      
        }
        @checked_records = (sort { $a <=> $b } @uniq);
    }
}


##########################################################
#  Assign form data to variables.
##########################################################

my $display_list  = $formdata{'list'};
my $sort_criteria = $formdata{'sort'};
my $search_term   = $formdata{'text'};
my $date_range    = $formdata{'week'};
my $recs_per_page = $formdata{'rppg'};
my $starting_pnt  = $formdata{'stpt'};
my $which_submit  = $formdata{'submit'};
my $mail_address  = $formdata{'address'};
my $which_records = $formdata{'sels'};
if ($formdata{'lang'}) {
    $language = $formdata{'lang'};
}

#  Source the language module

require "./newbooks.$language";


##########################################################
#  Create additional needed variables.
##########################################################

my $ending_pnt    = $starting_pnt + $recs_per_page - 1;
my $new_start_pnt = $ending_pnt + 1; 
my $display_count = $starting_pnt;
my $total_count   = 1;
my @html;
my @print;


##########################################################
#  Check to see if call to script includes search input.
#  If not, return the initial search form page.
##########################################################

if ( $starting_pnt < 1 ) {
    if ( $use_internal_form =~ /no/i ) {
	print"Location: $html_form", "\n\n";
	exit (0);
    } else {
	$initial = "yes";
	&NewSearchForm;
	exit (0);
    }
}


##########################################################
#  ToggleLanguage 
##########################################################
#

sub ToggleLanguage {
    if ($multilingual eq "yes" ) {
	@lang_toggle = ("<font face=\"sans-serif\" size=\"-1\"> $toggle_delimiter ");
        foreach my $lang_key (keys (%toggle_array)) {
	    if ($flags eq "yes") {
		$flag_link = "<img src=\"/images/$lang_key.gif\">";
	    } else {
		$flag_link = "";
            }
	    if ($lang_key eq $language) {
		@lang_toggle = (@lang_toggle, "$flag_link $toggle_array{$lang_key} $toggle_delimiter ");
	    } else {
	        @lang_toggle = (@lang_toggle, "$flag_link <a href=\"$this_script?lang=$lang_key\">$toggle_array{$lang_key}</a> $toggle_delimiter ");
	    } 
        }
	@lang_toggle = (@lang_toggle, '</font>');
    }
    return (@lang_toggle);
}


##########################################################
#  NewSearchForm 
##########################################################
#
#  If the CGI script is called without user input all we 
#  want to do is return the initial HTML search form page.

sub NewSearchForm {
    &PrintHead;
    &PrintButtons;
if ($multilingual eq "yes") {
    &ToggleLanguage;
    print qq(<div align="center">@lang_toggle<br /></div>);
}
    print <<EOSTUFF;
<hr width="95%" />

<form action="$this_script" method="get">
  <table width="95%" border="0" align="center">
    <tr>
      <td>
        <table width="100%" border="0" cellspacing="0" cellpadding="0" align="center">
          <tr valign="bottom">
            <td>
              <table border="0" cellspacing="0" cellpadding="0">
                <tr valign="middle" align="center">
                  <th nowrap width="1%" bgcolor="$inactive_tab_color">
			&nbsp; &nbsp;<a style="color:$inactive_font_color" href="/cgi-bin/Pwebrecon.cgi?$pwebrecon_link_language\DB=local&PAGE=First">$first_tab</a>&nbsp; &nbsp;
                  </th>
                </tr>
              </table>
            </td>
            <td>&nbsp;&nbsp;</td>
            <td>
              <table border="0" cellspacing="0" cellpadding="0">
                <tr>
                  <th nowrap width="1%" bgcolor="$inactive_tab_color">
			&nbsp; &nbsp;<a style="color:$inactive_font_color" href="/cgi-bin/Pwebrecon.cgi?$pwebrecon_link_language\DB=local&PAGE=bbSearch">$second_tab</a>&nbsp; &nbsp;
		  </th>
                </tr>
              </table>
            </td>
            <td>&nbsp;&nbsp;</td>
EOSTUFF
    if ($three_tabs eq "yes") {
    print <<EOSTUFF;
            <td>
              <table border="0" cellspacing="0" cellpadding="0">
                <tr>
                  <th nowrap width="1%" bgcolor="$inactive_tab_color">
			&nbsp; &nbsp;<a style="color:$inactive_font_color" href="/cgi-bin/Pwebrecon.cgi?$pwebrecon_link_language\DB=local&PAGE=rbSearch">$third_tab</a>&nbsp; &nbsp;
		  </th>
                </tr>
              </table>
            </td>
            <td>&nbsp;&nbsp;</td>
EOSTUFF
    }
    print <<EOSTUFF;
            <td>
              <table border="0" cellspacing="0" cellpadding="0">
                <tr>
                  <th valign="bottom" nowrap bgcolor="$active_tab_color">
			&nbsp; &nbsp;<font color="$active_font_color">$this_service</font>&nbsp; &nbsp;
		  </th>
                </tr>
              </table>
            </td>
            <td width="96%">&nbsp;&nbsp;</td>
          </tr>
        </table>
        <table  border="0" cellspacing="0" cellpadding="0" align=center width="100%">
          <tr bgcolor="$active_tab_color"> 
            <td valign="middle" colspan="4"> 
              <table width="100%" border="0" cellspacing="0" cellpadding="0">
                <tr> 
                  <td colspan="4">&nbsp;</td>
		</tr>
                <tr> 
                  <td align="left" valign="top"> 
		    <font color="$active_font_color"><b>&nbsp;&nbsp;$select_location_label</b></font><br />
EOSTUFF
    my $boxsize = (@locations / 2) + 1 ;
    print "\t\t    &nbsp;&nbsp;<select name=\"list\" size=\"$boxsize\">
                    <option selected value=\"all\">$all_locations_text</option>\n";
    while (@locations) {
	my $fragment = shift(@locations);
	my $display  = shift(@locations);
	print "\t\t    <option value=\"$fragment\">$display</option>\n";
    }
    if ($last_text_order eq "after" && $swap_last_and_interval eq "yes") {
        $interval        = "$interval_plural $last_text";
        $interval_plural = "$interval_plural $last_text";
        $last_text = "";
    } elsif ($last_text_order eq "after") {
        $interval        = "$last_text $interval_plural";
        $interval_plural = "$last_text $interval_plural";
        $last_text = "";
    }
    print <<EOSTUFF;
                    </select>
                  </td>
		  <td valign="top" width="30%">
		    <font color="$active_font_color"><b>&nbsp;&nbsp;$display_interval_label</b></font><br />
                    &nbsp;&nbsp;<select name="week" size="4">
                    <option selected="selected" value="1">$last_text $interval</option>
                    <option value="2">$last_text 2 $interval_plural</option>
                    <option value="3">$last_text 3 $interval_plural</option>
                    <option value="4">$last_text 4 $interval_plural</option>
                    </select>
		  </td>
		  <td valign="top">
                    <font color="$active_font_color"><b>&nbsp;&nbsp;$sort_by_label</b></font><br />
                  &nbsp;&nbsp;<select name="sort" size="3">
                  <option selected value="callno">$sort_label_call_no</option>
                  <option value="author">$sort_label_author</option>
                  <option value="title">$sort_label_title</option>
                  </select>
		  </td>
		  <td align="center">
		   <font color="$active_font_color"><b>
EOSTUFF
    if ( $short_blurb ) {
	print "$short_blurb";
    } else {
	print "&nbsp;";
    }
    print <<EOSTUFF;;
		   </b></font>

		  </td>
                </tr>
                <tr> 
		  <td>&nbsp;</td>
                  <td valign="top" colspan="3">
                   <font color="$active_font_color"><b>&nbsp;&nbsp;$search_for_label</b></font> &nbsp;
		   <input type="text" name="text" value="" size="20" />
		   &nbsp;
		  </td>
                </tr>
                <tr> 
                  <td colspan="4">&nbsp;</td>
		</tr>
           </table>
        </table>
      </td>
    </tr>
    <tr bgcolor="$inactive_tab_color" valign="middle"> 
      <td>
        <table border="0" width="100%" cellspacing="0" cellpadding="0">
	  <tr>
	    <td width="33%">
                    &nbsp;&nbsp;<select name="rppg" size="1">
                    <option value="10">&nbsp;10 $records_per_page</option>
                    <option value="20">&nbsp;20 $records_per_page</option>
                    <option value="25">&nbsp;25 $records_per_page</option>
                    <option selected="selected" value="50">&nbsp;50 $records_per_page</option>
                    <option value="100">100 $records_per_page</option>
                    </select>
	    </td>
	    <td align="center" width="33%"> 
	      <input type="hidden" name="stpt" value="1" />
	      <input type="hidden" name="lang" value="$language" />
              <input type="submit" name="submit" value="$search_button" />
              <input type="reset" value="$reset_button" />
	    </td>
	    <td width="34%">
		&nbsp;
	    </td>
          </tr>
	</table>
      </td>
    </tr>
    <tr>
      <td align="center">
EOSTUFF
     if ( $short_expl ) {
	print "<br /><font face=\"sans-serif\" size=\"-1\">$short_expl</font>";
     }
	print <<EOSTUFF;
      </td>
    </tr>
  </table>
</form>
EOSTUFF
    &PrintTail;
    exit (0);
}


##########################################################
#  After parsing, this function gets the ball rolling. 
##########################################################

&ReturnList;


##########################################################
#  ReturnList
##########################################################
#
#  This is sort of the  "main" function of the program.
#  It read the new books database, sends the data off to
#  be sliced, diced, and sorted; determines what the user
#  wanted to know and how they wanted it displayed; then 
#  calls the functions that will accomplish those ends.

sub ReturnList {
    # Turn the locations list into an associative array
    my %locations = @locations;
    # Now match the user requested location against the
    # keys in order to assign the display name to the
    # library variable.
    $library = $all_locations_text;
    foreach my $key (keys (%locations)) { 
	if ($key eq $display_list) {
	    $library = $locations{$key};
	}
    }

    # Open the flat-file database of new books
    open (DB, "$flat_file_db") || die "Can't open file: $!.\n";
    %index= ();
    while ($line = <DB>) {
	chomp ($line);
	($bib_id, $author, $title, $edition, $imprint, $location, $location_temp, $dispcallno, $callno, $web_link, $link_text, $week) = split(/\t/, $line);
	if ( $week <= $date_range ) {
	    &PopulateIndex($sort_criteria, $bib_id, $author, $title, $edition, $imprint, $location, $location_temp, $dispcallno, $callno, $web_link, $link_text) if $title;
	}
    }
    close (DB);

    @sorted = sort (keys %index);

    #  The code below fixes the 'problem' of In Process items showing up
    #  at the top of a call number sort, and items with no authors showing
    #  up at the top of an author search.  Although the DB may contain
    #  many items of either case, it will show up only once in the 
    #  @sorted array.  "In Process" will be the first element because
    #  we added a space to the beginning of that field when we created
    #  it in newbooks.pl.  Records with no authors will be the first
    #  element because it has a null value.

    my $first_element = $sorted[0];
    if ($first_element =~ /In Process/i ||
	$first_element eq "" ) {
	shift(@sorted);
	push (@sorted,$first_element);
    }

    foreach $sortkey (@sorted) {
	&CheckLocation($sortkey);
    }

    if ( $which_submit =~ /$sb_print_button/i ) {
        &OutputFormat;
    } elsif ( $which_submit =~ /$sb_email_button/i ) {
        &SendEmail;
    } else {
        &PrintHead;
	&PrintButtons;
        &PrintMiniForm;
        &PrintResultsTitle ($library, $sort_criteria);
        if ( ! @html ) {
            &PrintNoResults;
        } else {
  	    &TableStart;
            foreach (@html) {
                print;
            }
	    &TableEnd;
        }
        &PrintTail;
    }
}


##########################################################
#  PrintNoResults
##########################################################
#
#  This prints a message if no search results are found.
#  This conditions should only occur if searching on a 
#  particular term, of if there are no database entries 
#  for a particular location.

sub PrintNoResults {
  print <<EOSTUFF;
	<div align="center">
	<table border="1" cellpadding="5" width="80%">
	  <tr bgcolor="$msg_table_color">
	    <td align="center">
		<font color="$msg_font_color">
		<b>$results_search: $err_no_results.</b>
		</font>
	    </td>
	  </tr>
	</table>
        <br />
	</div>
EOSTUFF
}


##########################################################
#  CheckLocation
##########################################################
#
#  This filters out the entries for the desired location.

sub CheckLocation {
  my ($sortkey) =@_;
  foreach $rlEntry (@{$index{$sortkey}}) {
	if ($rlEntry->[5] =~ /$display_list/i) {
	    &ListIt($rlEntry);
	} elsif ($display_list eq 'all') {
	    &ListIt($rlEntry);
	}
  }
}

##########################################################
#  PrintHead
##########################################################
#
#  Outputs the top portion of the HTML code.

sub PrintHead {
    print "Content-type: text/html\n\n";
    print <<EOSTUFF;
$doc_type_def
<html>
<head>
  <title>$page_title</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="DC.Title"       content="New Books List $version">
  <meta name="DC.Creator"     content="Michael Doran">
  <meta name="DC.Type"        content="Software">
  <meta name="DC.Source"      content="http://rocky.uta.edu/doran/autolist/">
  <meta name="DC.Publisher"   content="University of Texas at Arlington Libraries">
  <meta name="DC.Rights"      content="Copyright 2000-2005 University of Texas at Arlington">
  <meta name="DC.Description" content="The New Books List is a suite of Perl programs that extracts new item data from the Voyager ILMS and displays that data via a web form.">
</head>
<body  bgcolor="$body_bgcolor" text="$body_text" link="$body_link" vlink="$body_vlink" alink="$body_vlink">
	<a name="top"></a>
EOSTUFF
    ########################################
    #  Read in the WebVoyage header file
    ########################################
    if ( $header_file ) {
        open (HEAD, "$header_file") 
	    || warn "Error finding or opening \$header_file: $header_file";
        while (<HEAD>) {
	    print;
	}
    }
    close (HEAD);
}


##########################################################
#  PrintButtons
##########################################################
#
#  Outputs the WebVoyage navigation buttons.

sub PrintButtons {
    print "<div align=\"center\">";
    if ( $initial eq "yes" ) {
	print "<img border=\"0\" alt=\"$results_search\" src=\"/images$image_subdir/DownSearch.gif\" />";
    } else {
	if ( $use_internal_form =~ /no/i ) {
	    print "<a href=\"$html_form\"><img border=\"0\" alt=\"$results_search\" src=\"/images$image_subdir/UpSearch.gif\" /></a>";
	} else {
	    print "<a href=\"$this_script?lang=$language\"><img border=\"0\" alt=\"$results_search\" src=\"/images$image_subdir/UpSearch.gif\" /></a>";
	}
    }
    print "<a href=\"/cgi-bin/Pwebrecon.cgi?$pwebrecon_link_language\DB=local&PAGE=pbLogon\"><img border=\"0\" alt=\"$img_alt_patron\" src=\"/images$image_subdir/UpPatron.gif\" /></a><a href=\"$new_books_help_url\"><img border=\"0\" alt=\"$img_alt_help\" src=\"/images$image_subdir/UpHelp.gif\" /></a><a href=\"/cgi-bin/Pwebrecon.cgi?$pwebrecon_link_language\DB=local&PAGE=Exit\"><img border=\"0\" alt=\"$img_alt_exit\" src=\"/images$image_subdir/UpExit.gif\" /></a><br /><br />
        </div>";
}


##########################################################
#  PrintMiniForm
##########################################################
#
#  Outputs the "mini" new books search form.

sub PrintMiniForm {
     print <<EOSTUFF;
	<form action="$this_script" method="get">
	<table align="center" border="0" cellspacing="0" width="100%">
	  <tr bgcolor="$mf_topbar_color">
	    <td align="left" valign="middle" nowrap="nowrap">
		<font color="$mf_topbar_font"><b>&nbsp;&nbsp;$miniform_location_label</b></font>
                &nbsp;<select name="list" size="1">
                <option selected="selected" value="all">$all_locations_text</option>
EOSTUFF
    while (@locations) {
        my $fragment = shift(@locations);
        my $display  = shift(@locations);
        print "\t\t    <option value=\"$fragment\">$display</option>\n";
    }
    if ($last_text_order eq "after") {
        $interval        = "$last_text $interval_plural";
        $interval_plural = "$last_text $interval_plural";
        $last_text = "";
    }
    print <<EOSTUFF;
                </select>
	    </td>
	    <td align="center" nowrap="nowrap">
		<font color="$mf_topbar_font"><b>&nbsp;&nbsp;$display_interval_label</b></font>
                &nbsp;<select name="week" size="1">
                <option selected="selected" value="1">$last_text $interval</option>
                <option value="2">$last_text 2 $interval_plural</option>
                <option value="3">$last_text 3 $interval_plural</option>
                <option value="4">$last_text 4 $interval_plural</option>
                </select>
	    </td>
	    <td align="center" nowrap="nowrap">
		<font color="$mf_topbar_font"><b>&nbsp;&nbsp;$sort_by_label</b></font>
		&nbsp;<select name="sort" size="1">
                <option selected value="callno">$sort_label_call_no</option>
                <option value="author">$sort_label_author</option>
                <option value="title">$sort_label_title</option>
                </select>
	    </td>
	  </tr>
	  <tr bgcolor="$mf_bottombar_color" valign="middle">
	    <td width="38%" nowrap="nowrap">
                &nbsp;&nbsp;<select name="rppg" size="1">
                <option value="10">&nbsp;10 $records_per_page</option>
                <option value="20">&nbsp;20 $records_per_page</option>
                <option value="25">&nbsp;25 $records_per_page</option>
                <option selected="selected" value="50">&nbsp;50 $records_per_page</option>
                <option value="100">100 $records_per_page</option>
                </select>
	    </td>
	    <td width="24%" align="center">
		<input type="hidden" name="stpt" value="1" />
		<input type="hidden" name="lang" value="$language" />
		<input type="submit" name="submit" value="$search_button" />
		<input type="reset" value="$reset_button" />
	    </td>
	    <td width="38%" align="right" nowrap="nowrap">
	        <font color="$mf_bottombar_font"><b>$miniform_search_for_label</b></font>&nbsp;
		<input type="text" name="text" value="" size="20" />&nbsp;&nbsp;
	    </td>
	  </tr>
	</table>
	</form>
EOSTUFF
}


##########################################################
#  PrintResultsTitle
##########################################################
#
#  Outputs the headings when search results are displayed. 

sub PrintResultsTitle {
    my ($library, $sort_criteria) = @_;
    if ($sort_criteria eq 'callno') {
        $sort_criteria = "$sort_label_call_no";
    } elsif ($sort_criteria eq 'author') {
        $sort_criteria = "$sort_label_author";
    } elsif ($sort_criteria eq 'title') {
        $sort_criteria = "$sort_label_title";
    }
    print <<EOSTUFF;
	<div align="center">
	<font size="+2" face="sans-serif" color="$heading_font_color">$this_service: $library</font></div>
	<div align="center">
EOSTUFF
    my $last_record_count = $display_count - 1;
    my $final_total = $total_count - 1;
    if ($date_range ne "1") {
        $interval = $interval_plural;
    }
    if ( $search_term ) {
	print "<b>$results_search:</b> $results_term_type = 
		<font color=\"$searchterm_font_color\" face=\"sans-serif\">$search_term</font>; $date_range $interval, $results_sorted_by $sort_criteria.<br />";
    } else {
	print "<b>$results_search:</b> $date_range $interval, $results_sorted_by $sort_criteria.<br />";
    }
    if ( @html ) {
        print "$starting_pnt - $last_record_count $results_of $final_total $results_items.<br /><br /></div>";
    } else {
	print "<br />";
    }
}

##########################################################
#  TableStart
##########################################################
#
#  Outputs the HTML between the head and the beginning of
#  the rows of records. 

sub TableStart {
    &PrintNav;
    print <<EOSTUFF;
        <form action="$this_script" method="get">
	<table width="100%" border="1" cellspacing="0" cellpadding="3">
	<tr bgcolor="$top_row_color">
	  <th>&#35;</th>
	  <th>$column_heading_title</th>
	  <th>$column_heading_author</th>
	</tr>
EOSTUFF
}


##########################################################
#  PopulateIndex
##########################################################
#
#  Takes each record that has met the date range criteria
#  and populates an anonymous array. An index is populated
#  with these entries using each record's value of the sort
#  criteria (author|title|call number) as a key. 
#  

sub PopulateIndex {
    my ($sort_criteria, $bib_id, $author, $title, $edition, $imprint, $location, $location_temp, $dispcallno, $callno, $web_link, $link_text) = @_;
    # Create an anonymous array for each entry
    $rlEntry = [$bib_id, $author, $title, $edition, $imprint, $location, $location_temp, $dispcallno, $callno, $web_link, $link_text];
    # Add to the index 
    push (@{$index{${$sort_criteria}}}, $rlEntry);
}


##########################################################
#  ListIt
##########################################################
#
#  The entries that have made it this far have already
#  passed through filters for date range and location, and
#  have been sorted.  Now they are further winnowed 
#  depending on what page of the results we are at and 
#  if a search term was entered, here is where that is 
#  looked for in the record.

sub ListIt {
    my ($rlEntry) = @_;
    if ($total_count >= $starting_pnt && $display_count <= $ending_pnt) {
        if ( !$search_term  ) {
 	    &SaveForHTML;
	    if ( $which_records && $which_records ne 'allsel' ) {
	        &SaveForPrint;
            }
  	    $display_count++; 
        } elsif (
	    ((length $search_term > 1) && $rlEntry->[2] =~ /$search_term/i )
         || ((length $search_term > 1) && $rlEntry->[1] =~ /$search_term/i )
         || $rlEntry->[7] =~ /^$search_term/i ) {
	    &SaveForHTML;
	    if ( $which_records ne 'allsel' ) {
	        &SaveForPrint;
            }
  	    $display_count++; 
        }
    }
    if ( !$search_term ) {
        if ( $which_records eq 'allsel' ) {
    	    &SaveForPrint;
        }
        $total_count++;
    } elsif (
         ((length $search_term > 1) && $rlEntry->[2] =~ /$search_term/i ) ||
         ((length $search_term > 1) && $rlEntry->[1] =~ /$search_term/i ) ||
         $rlEntry->[7] =~ /^$search_term/i ) {
        if ( $which_records eq 'allsel' ) {
    	    &SaveForPrint;
        }
        $total_count++;
    } 
}


##########################################################
#  SaveForHTML
##########################################################
#
#  The "chosen" records are packaged for HTML display and
#  returned as a list.

sub SaveForHTML {
    @html = (@html, "
	<tr bgcolor=\"$top_row_color\">
	  <td align=\"left\" rowspan=\"2\">
	    <input type=\"checkbox\" name=\"check\" value=\"$display_count\"");
    if (@checked_records) {
        foreach $i (@checked_records) {
	    if ($i eq $total_count) {
	        @html = (@html, "checked=\"checked\"");
	        last;
            }
        }
    }
    @html = (@html, " />&nbsp;$display_count&nbsp;
	  </td>
	  <td>");
    my $title_display = $rlEntry->[2];
    $title_display =~ s/^(.*\S)\s?$/$1/;
    my $short_title = $rlEntry->[2];
    $short_title =~ s/^(.*)\/.*/$1/;
    $short_title =~ s/^(.*\S)\s?$/$1/;
    if ($long_title ne "yes") {
	$title_display = "$short_title";
    }

    $bbid_value = $rlEntry->[0];
    @html = (@html, " <a href=\"/cgi-bin/Pwebrecon.cgi?$pwebrecon_link_language\BBID=$bbid_value\">$title_display</a>");

    if ( $rlEntry->[3] ) {
	@html = (@html, "&nbsp; $rlEntry->[3]");
    }
    if ( $show_imprint eq "yes" ) {
	@html = (@html, " &nbsp; $rlEntry->[4]</td>");
    } else {
	@html = (@html, "</td>");
    }
    @html = (@html,  "
	  <td>
	    $rlEntry->[1]&nbsp;
	  </td>
	</tr>
	<tr bgcolor=\"$bottom_row_color\">
	  <td colspan=\"2\">");
#	  <td>");
    if ($location_preface) {
	 @html = (@html, " $location_preface $rlEntry->[5]");
    } else {
	 @html = (@html, " $rlEntry->[5]");
    }
    @html = (@html, " &nbsp; &nbsp; &nbsp;");
    if ($call_number_preface) {
        if ( $rlEntry->[7] =~ /In Process/i && $in_process_page eq 'yes' ) {
            @html = (@html, " $call_number_preface <a href=\"$in_process_url\">$rlEntry->[7]</a> ");
        } else {
            @html = (@html, " $call_number_preface $rlEntry->[7] ");
        }
    } else {
        if ( $rlEntry->[7] =~ /In Process/i && $in_process_page eq 'yes' ) {
            @html = (@html, " <a href=\"$in_process_url\">$rlEntry->[7]</a> ");
        } else {
            @html = (@html, " $rlEntry->[7] ");
        }
    }
    if ( $rlEntry->[9] ) {
        @html = (@html, " <br />$web_link_preface <a href=\"$rlEntry->[9]\">$rlEntry->[10]</a>");
    }
    if ( $rlEntry->[6] ) {
        @html = (@html, "<br /><i>$location_temp_preface $rlEntry->[6]</i>");
    }
    @html = (@html, "</td></tr>");
}


##########################################################
#  SaveForPrint
##########################################################
#
#  The "chosen" records are packaged for print/save.

sub SaveForPrint {
    if ( $which_records eq 'allsel' ) {
        foreach $i (@checked_records) {
            if ( $i == $total_count ) {
  	        &AddPrintRecord;
            }
        }
    } elsif ( $which_records eq 'allpage' ) {
        if ( $display_count >= $starting_pnt &&
             $display_count <= $ending_pnt ) {
	    &AddPrintRecord;
        }
    } elsif ( $which_records eq 'selpage' ) {
        foreach $i (@checked_records) {
 	    if ( $i == $display_count &&
                 $i >= $starting_pnt  &&
                 $i <= $ending_pnt ) {
	        &AddPrintRecord;
	    }    
        }
    }
}


##########################################################
#  AddPrintRecord
##########################################################
#
#  The "chosen" records are packaged for print/save 

sub AddPrintRecord {
    my $title_display = $rlEntry->[2];
    # Lets shorten the title again (if desired)
    if ($long_title ne "yes") {
        $title_display =~ s/^(.*)\/.*/$1/;
        $title_display =~ s/^(.*\S)\s?$/$1/;
    }
    @print = (@print, " ");
    if ($rlEntry->[1]) {
        @print = (@print, "$rlEntry->[1]");
    }
    if ($rlEntry->[3]) {
        @print = (@print, "$title_display, $rlEntry->[3]");
    } else {
        @print = (@print, "$title_display");
    }
    if ($show_imprint eq "yes") {
        @print = (@print, "$rlEntry->[4]");
    }
    if ($rlEntry->[6]) {
        @print = (@print, "$rlEntry->[5] ($rlEntry->[6])");
    } else {
        @print = (@print, "$rlEntry->[5]");
    }
    @print = (@print, "$rlEntry->[7]");  
}


##########################################################
#  JumpLink
##########################################################
#
#  Provides links for the PrintNav function.

sub JumpLink {
    my ($jump_point,$image) = @_; 
    if ($search_term) {
        $search_term =~ s/ /+/g;
        foreach my $i(":",",") {
	    my $hex = sprintf("%%%X", ord($i));
	    $search_term =~ s/$i/$hex/g;
        }
    }
    # Replace spaces in location fragment with plus signs (+)
    my $jump_display_list = $display_list;
    $jump_display_list =~ s/ /+/g;
    if ($image) {
	$bgcolor_temp = "";
    } else {
	$bgcolor_temp = $inactive_jump_bgcolor;
    }
    my $jump_link = "<td valign=\"middle\" align=\"center\" $bgcolor_temp><a href=\"$this_script?lang=$language&list=$jump_display_list&sort=$sort_criteria&week=$date_range&rppg=$recs_per_page&stpt=$jump_point&submit=Search&text=$search_term";
    if (@checked_records) {
	for $i (@checked_records) {
	    $jump_link = $jump_link . "&check=$i";
        }
    }
    if ($image) {
        $jump_link = $jump_link . "\">$image</a></td>";
    } else {
        $jump_link = $jump_link . "\"><font $inactive_jump_font>$jump_point</font></a></td>";
    }
    return $jump_link;
}


##########################################################
#  PrintNav
##########################################################
#
#  Prints the navigation buttons [ <- Prev Next-> ] at
#  the top and bottom of the results pages, as well the
#  jump points before and after the current start point
#  and corresponding to the records per page. 

sub PrintNav {
# Note to myself: img vs. image for prev & next ???? -mdd
    my $final_total = $total_count - 1;
    my $minus_two   = $starting_pnt - (2 * $recs_per_page);
    my $minus_one   = $starting_pnt - (1 * $recs_per_page);
    my $plus_one    = $starting_pnt + (1 * $recs_per_page);
    my $plus_two    = $starting_pnt + (2 * $recs_per_page);
    my $plus_three  = $starting_pnt + (3 * $recs_per_page);
    my $plus_four   = $starting_pnt + (4 * $recs_per_page);
    my $plus_five   = $starting_pnt + (5 * $recs_per_page);
    my $prev_img_active = "<img src=\"/images$image_subdir/s-prev.gif\" alt=\"$img_alt_prev\" border=\"0\" />";
    my $prev_img_not_active = "<img src=\"/images$image_subdir/d-prev.gif\" border=\"0\" alt=\"\" />";
    my $next_img_active = "<img src=\"/images$image_subdir/s-next.gif\" alt=\"$img_alt_next\" border=\"0\" />";
    my $next_img_not_active = "<img src=\"/images$image_subdir/d-next.gif\" border=\"0\" alt=\"\" />";
    my $jump_string = "<table align=\"center\" border=\"0\" cellpadding=\"1\"><tr>";
    if ($starting_pnt > 1) {
        my $link = &JumpLink(1);
	my $previous_link = &JumpLink($minus_one,$prev_img_active);
	$jump_string = $jump_string . $previous_link . $link;
    } elsif ($recs_per_page < $final_total) {
	$jump_string = $jump_string . "<td>$prev_img_not_active</td><td align=\"center\" valign=\"middle\" $active_jump_bgcolor><b><font $active_jump_font>1</font></b></td>";
    } else {
	$jump_string = $jump_string . "<td>$prev_img_not_active</td>";
    }
    if ($minus_two > 1) {
	my $link = &JumpLink($minus_two);
	if ($minus_two > (1 + $recs_per_page)) {
            $jump_string = $jump_string . "<td align=\"center\" valign=\"middle\" $inactive_jump_bgcolor><font $inactive_jump_font>...</font></td>$link";
        } else {
            $jump_string = $jump_string . "$link";
	}
    }
    if ($minus_one > 1) {
	my $link = &JumpLink($minus_one);
        $jump_string = $jump_string . "$link";
    }
    if ($starting_pnt > 1) {
        $jump_string = $jump_string . "<td align=\"center\" valign=\"middle\" $active_jump_bgcolor><b><font $active_jump_font>$starting_pnt</font></b></td>";
    }
    if ($plus_one <= $final_total) {
	my $link = &JumpLink($plus_one);
        $jump_string = $jump_string . "$link";
    }
    if ($plus_two <= $final_total) {
	my $link = &JumpLink($plus_two);
        $jump_string = $jump_string . "$link";
    }
    if ($plus_three <= $final_total) {
	my $link = &JumpLink($plus_three);
        $jump_string = $jump_string . "$link";
    }
    if ($plus_four <= $final_total) {
	my $link = &JumpLink($plus_four);
        $jump_string = $jump_string . "$link";
    }
    if ($plus_five <= $final_total) {
	my $link = &JumpLink($plus_five);
        $jump_string = $jump_string . "$link";
	if (($plus_five + $recs_per_page) < $final_total) {
	    my $last_link = (((sprintf "%.d",($final_total / $recs_per_page)) * $recs_per_page) + 1);
	    if ($last_link > $final_total ) {
		$last_link = ($last_link - 10);
	    }
	    my $link = &JumpLink($last_link);
            $jump_string = $jump_string . "<td align=\"center\" $inactive_jump_bgcolor><font $inactive_jump_font>...</font></td>$link";
	}
    }
    if (($starting_pnt + $recs_per_page) <= $final_total) {
	my $link = &JumpLink($plus_one,$next_img_active);
	$jump_string = $jump_string . $link;
    } else {
	$jump_string = $jump_string . "<td>$next_img_not_active</td>";
    }

    $jump_string = $jump_string . "</tr></table>";

    print "$jump_string";
}


##########################################################
#  TableEnd
##########################################################
#
#  Finishes off the table containing the records,
#  and includes the Saving Your Search Results box.
#
#  Note: Changing the text in the Download and Email
#  submit buttons can cause those functions to fail.
#  The print submit button must contain the word "Print"
#  and the email submit button must contain the word
#  Email.  See condition in ReturnList function. - mdd

sub TableEnd {
    print "</table>\n";
    foreach my $i (@checked_records) {
        print "	<input type=\"hidden\" name=\"check\" value=\"$i\" />\n";
    }
    print <<EOSTUFF;
	<input type="hidden" name="list" value="$display_list" />
	<input type="hidden" name="sort" value="$sort_criteria" />
	<input type="hidden" name="text" value="$search_term" />
	<input type="hidden" name="week" value="$date_range" />
	<input type="hidden" name="rppg" value="$recs_per_page" />
	<input type="hidden" name="stpt" value="$starting_pnt" />
	<br />
EOSTUFF
    if ( @html ) {
        print <<EOSTUFF;
	<div align="center">
	<input type="reset" value="$clear_selected_text" />
	<input type="hidden" name="lang" value="$language" />
	<input type="submit" name="submit" value="$retain_selected_text" />
	</div>
	<table align="center" border="0" width="95%">
	  <tr>
	    <td align="left" valign="top">
	      <a href="#top">$back_to_top_text</a>
	    </td>
	    <td align="center">
		<br />
EOSTUFF
	&PrintNav;
        print <<EOSTUFF;
	    </td>
	    <td align="right" valign="top">
	      <a href="#top">$back_to_top_text</a>
	    </td>
	</table>

	<br />
	<table align="center" border="1" bgcolor="$save_table_color" cellspacing="0" cellpadding="5">
	  <tr>
	    <th colspan="2">$sb_save_title</th>
	  </tr>
	  <tr>
	    <th>$sb_records</th>
	    <th>$sb_print_save_email</th>
	  </tr>
	  <tr>
	    <td>
		<input type="radio" name="sels" value="allpage" />$sb_all_onpage<br />
		<input type="radio" name="sels" value="selpage" checked="checked" />$sb_selected_onpage<br />
		<input type="radio" name="sels" value="allsel" />$sb_selected_allpages<br />
	    </td>
	    <td align="center">
		<input type="submit" alt="$sb_print_button" name="submit" value="$sb_print_button">
	    </td>
	  </tr>
	  <tr>
	    <td valign="middle" nowrap="nowrap">
		$sb_email_text<br /><input type="text" size="25" maxlength="60" name="address" value="" />
	    </td>
	    <td align="center">
		<input type="submit" alt="$sb_email_button" name="submit" value="$sb_email_button" />
	    </td>
	  </tr>
	</table>
	</form>
	<br />
EOSTUFF
    }
}


##########################################################
#  PrintTail
##########################################################
#
#  Finishes off the HTML page, mainly by reading in the
#  WebVoyage footer file.

sub PrintTail {
    if ( $initial eq "yes" ) {
	print "<hr width=\"95%\" />\n";
    } else {
	print "<hr />\n";
    }
    ########################################
    #  Read in the WebVoyage footer file
    ########################################
    if ( $footer_file ) {
        open (FOOTER, "$footer_file")
	    || warn "Error finding or opening \$footer_file: $footer_file";
        while (<FOOTER>) {
            print;
	}
    }
    close (FOOTER);
    print "</html>\n";
    exit (0);
}


##########################################################
#  OutputFormat
##########################################################
#
#  Formats & outputs records for save search results

sub OutputFormat {
    print  "\r\n\r\n";
    print  "#  $this_service\r\n";
    print  "#\r\n";
    print  "#  $org_name\r\n";
    print  "#  $org_dept\r\n";
    print  "#  $org_addr\r\n";
    print  "#  $org_phone\r\n";
    print  "#  $org_email\r\n";
    foreach $i (@print) {
        print  "$i\r\n";
    }
}


##########################################################
#  SendEmail
##########################################################
#
#  Formats & emails records for save search results

sub SendEmail {
    if ( ! $mail_address ) {
        &MailAck("noaddress");
    }
    # Look for valid email address
    # ...first take out any spaces
    $mail_address =~ s/ //g;
    # ...then check for valid characters
    unless ( $mail_address =~ /^\w{1}[\w\-\.]*\@[\w\-\.]+/ ) {
        # if "bad" default to print/save option
        &MailAck("faulty");
    }
    my $mailprog = "/usr/bin/mailx";
    open (MAIL, "| $mailprog -s \"$this_service\" -r \"$org_email\" $mail_address") 	|| &MailAck("error"); 
    print MAIL "\r\n";
    print MAIL "# $this_service\r\n";
    print MAIL "#\r\n";
    print MAIL "# $org_name\r\n";
    print MAIL "# $org_dept\r\n";
    print MAIL "# $org_addr\r\n";
    print MAIL "# $org_phone\r\n";
    print MAIL "# $org_email\r\n";
    print MAIL "\r\n";
    foreach $i (@print) {
        print MAIL "$i\r\n";
    }
    close (MAIL);
    &MailAck;
}


##########################################################
#  MaikAck
##########################################################
#
#  Includes an acknowledgement of having sent an email

sub MailAck {
    my $status = $_[0];
    &PrintHead;
    &PrintButtons;
    &PrintMiniForm;
    &PrintResultsTitle ($library, $sort_criteria);
    print <<EOSTUFF;
	<div align="center">
	<table cellpadding="5" border="1" cellspacing="0" width="80%">
	  <tr bgcolor="$msg_table_color">
	    <td align="center">
		<font color="$msg_font_color">
EOSTUFF
    if ($status eq "noaddress") {
        print "<b>$msg_email_err</b><br />$msg_email_err_noaddr";
    } elsif ($status eq "faulty") {
        print "<b>$msg_email_err</b><br />$msg_email_err_faulty";
    } elsif ($status eq "error") {
        print "<b>$msg_email_err</b><br />$msg_email_err_prog";
	warn "Mail program ($mailprog) can't be opened.\n";
    } else {
        print "<b>$msg_email_sent</b>";
    }
    print "
	    </td>
	  </tr>
	</table>
	</div>
	<br />";
    &TableStart;
    foreach (@html) {
        print;
    }
    &TableEnd;
    &PrintTail;
}

exit(0);
